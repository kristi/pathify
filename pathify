#
# Helper script to manage PATH and environment variables
#
# Source this script in your ~/.bashrc file.
# E.g. add this line to ~/.bashrc (change path to point to this script)
#     source ~/pathify
#
# Add environment activation scripts (or symlinks) in $PATHIFY_HOME

PATHIFY_HOME=$HOME/.pathify
[[ -e "$PATHIFY_HOME" ]] || mkdir -p "$PATHIFY_HOME"
## Clear history of loaded environments
#unset PATHIFY_HISTORY
#unset PATHIFY_LAST_ENV

function pathify-usage {
    cat <<END
pathify [env-name]
unpathify [env-name]
pathify command [env-name]

Helper Commands

pathify edit env-name     Opens your $EDITOR (or vim if $EDITOR is unset) to 
                          edit a pathify environment
pathify help, pathify -h, pathify --help   Displays this help message
pathify load env-name     Loads an environment, sets variables
pathify new env-name      Create a new pathify environment
pathify reload env-name   Reloads an environment
pathify unload env-name   Unloads an environment, reverts variables
pathify --version         Displays version

Note: You can't have an environment with the same name as a pathify command.
    (So you can't create an environment called "new" for example.)

    Also, you shouldn't create environments with the same name but different
    case because environment variables may clobber each other, and it is
    generally confusing.
    (e.g. you should just pick one of "myenv" "myEnv" "MyEnv" "MYENV" )

END
    pathify --version
}

function pathify {
    case "$1" in
        edit) shift; pathify-edit "$@" ;;
        help|-h|--help) pathify-usage; return 1 ;;
        load) shift; pathify-load "$@" ;;
        new) shift; pathify-new "$@" ;;
        reload) shift; pathify-reload "$@" ;;
        unload) shift; pathify-unload "$@" ;;
        --version) echo "pathify 1.0"; return 0 ;;
        *) pathify-load "$@" ;;
    esac
}

function _pathify_verify_env {
    local env="$1"
    [[ -z "$env" ]] && echo "pathify: Error: No environment given" && return 1
    [[ -z "$PATHIFY_HOME" ]] && echo "pathify: Error: PATHIFY_HOME not set" && return 1
    [[ ! -e "$PATHIFY_HOME" ]] && echo "pathify: Error: PATHIFY_HOME directory '$PATHIFY_HOME' doesn't exist" && return 1
    [[ ! -d "$PATHIFY_HOME" ]] && echo "pathify: Error: PATHIFY_HOME directory '$PATHIFY_HOME' not a directory" && return 1
    return 0
}

function pathify-load {
    local env="${1:-$PATHIFY_LAST_ENV}"
    _pathify_verify_env "$env" || return 1

    [[ ! -e "$PATHIFY_HOME/$env" ]] && echo "pathify: Error: environment '$env' doesn't exist" && return 1

    echo "pathify: Loading $env"
    source "$PATHIFY_HOME/$env"

    if [[ "$?" == 0 ]]
    then
        PATHIFY_HISTORY="$env ${PATHIFY_HISTORY//$env /}"
        PATHIFY_LAST_ENV="$env"
    fi
}

function pathify-unload {
    local env=${1:-${PATHIFY_HISTORY%% *}}
    [[ -z "$env" ]] && echo "pathify: Error: no environment to unload" && return 1

    local deactivation_command="deactivate_$env"
    echo "pathify: Unloading $env"
    "$deactivation_command"
    if [[ "$?" == 0 ]]
    then
        PATHIFY_HISTORY="${PATHIFY_HISTORY/$env /}"
        PATHIFY_LAST_ENV="$env"
    fi
}

function unpathify {
    pathify-unload "$@"
}


function pathify-reload {
    local env=${1:-${PATHIFY_HISTORY%% *}}
    [[ -z "$env" ]] && echo "pathify: Error: no environment to reload" && return 1

    unpathify "$env"
    pathify "$env"
}

function repathify {
    pathify-reload "$@"
}

function pathify-new {
    local env="$1"
    _pathify_verify_env "$env" || return 1

    if echo "pathify template README.md test-pathify" | grep -w -q "$env" ; then
        echo "pathify: Error: invalid environment name - pathify system file" 
        return 1
    elif echo "edit help load new reload unload -h --help --version" | grep -w -q "$env" ; then
        echo "pathify: Error: invalid environment name - cannot have environment with the same name as a pathify command"
        return 1
    elif (cd "$PATHIFY_HOME" && ls -1) | grep -x -i -q "$env" ; then
        echo "pathify: Error: invalid environment name - case insensitive match with existing environment"
        return 1
    elif echo "$env" | grep -q "^[^[:alnum:]]" ; then
        echo "pathify: Error: invalid environment name - cannot start with special character"
        return 1
    fi
    [[ -e "$PATHIFY_HOME/$env" ]] && echo "pathify: Error: '$env' environment already exists" && return 1
    [[ ! -e "$PATHIFY_HOME/template" ]] && echo "pathify: Error: no template found at '$PATHIFY_HOME/template'" && return 1

    local env_upper=$(echo "$env" | tr '[:lower:]' '[:upper:]')
    sed -e "s/@env@/$env/g" -e "s/@ENV@/$env_upper/g" template > "$PATHIFY_HOME/$env"

    PATHIFY_LAST_ENV="$env"
    pathify-edit "$env"
}

function pathify-edit {
    local env="${1:-$PATHIFY_LAST_ENV}"
    _pathify_verify_env "$env" || return 1

    [[ ! -e "$PATHIFY_HOME/$env" ]] && echo "pathify: Error: environment '$env' doesn't exist" && return 1

    PATHIFY_LAST_ENV="$env"
    ${EDITOR:-vim} "$PATHIFY_HOME/$env"
}

# tab completion
if [ -n "$BASH" ] ; then
    _pathify_complete_envs()
    {
        local cur="${COMP_WORDS[COMP_CWORD]}"
        COMPREPLY=( $(compgen -W "`ls $PATHIFY_HOME | grep -x -v -E 'pathify|README.md|template|test-pathify'`" -- ${cur}) )
    }
    _pathify_complete_hist()
    {
        local cur="${COMP_WORDS[COMP_CWORD]}"
        COMPREPLY=( $(compgen -W "$PATHIFY_HISTORY" -- ${cur}) )
    }

    complete -o default -o nospace -F _pathify_complete_envs pathify pathify-edit
    complete -o default -o nospace -F _pathify_complete_hist unpathify 

elif [ -n "$ZSH" ] ; then
    _pathify_complete_envs()
    {
        local cur="${COMP_WORDS[COMP_CWORD]}"
        reply=( $(cd $PATHIFY_HOME && ls -d ${1}* | grep -x -v -E 'pathify|README.md|template|test-pathify') )
    }
    _pathify_complete_hist()
    {
        local cur="${COMP_WORDS[COMP_CWORD]}"
        reply=( $(echo ${PATHIFY_HISTORY// /$'\n'} | grep "^${1}") )
    }

    compctl -K _pathify_complete_envs pathify pathify-edit
    compctl -K _pathify_complete_hist unpathify 
fi

# vim: ft=zsh ts=4 sw=4 et:
