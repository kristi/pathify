# This file must be sourced from bash
# You cannot run it directly
#
# This sets up environment variables for a custom build environment

deactivate_foo () {
    # reset old environment variables
    if [ -n "$_OLD_FOO_PATH" ] ; then
        PATH="$_OLD_FOO_PATH"
        export PATH
        unset _OLD_FOO_PATH
    fi
    if [ -n "$_OLD_FOO_MANPATH" ] ; then
        MANPATH="$_OLD_FOO_MANPATH"
        export MANPATH
        unset _OLD_FOO_MANPATH
    fi
    if [ -n "$_OLD_FOO_CFLAGS" ] ; then
        CFLAGS="$_OLD_FOO_CFLAGS"
        export CFLAGS
        unset _OLD_FOO_CFLAGS
    fi
    if [ -n "$_OLD_FOO_CXXFLAGS" ] ; then
        CXXFLAGS="$_OLD_FOO_CXXFLAGS"
        export CXXFLAGS
        unset _OLD_FOO_CXXFLAGS
    fi
    if [ -n "$_OLD_FOO_LDFLAGS" ] ; then
        LDFLAGS="$_OLD_FOO_LDFLAGS"
        export LDFLAGS
        unset _OLD_FOO_LDFLAGS
    fi
    if [ -n "$_OLD_FOO_LD_RUN_PATH" ] ; then
        LD_RUN_PATH="$_OLD_FOO_LD_RUN_PATH"
        export LD_RUN_PATH
        unset _OLD_FOO_LD_RUN_PATH
    fi
    if [ -n "$_OLD_FOO_MAKEFLAGS" ] ; then
        MAKEFLAGS="$_OLD_FOO_MAKEFLAGS"
        export MAKEFLAGS
        unset _OLD_FOO_MAKEFLAGS
    fi

    # This should detect bash and zsh, which have a hash command that must
    # be called to get it to forget past commands.  Without forgetting
    # past commands the $PATH changes we made may not be respected
    if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
        hash -r
    fi

    if [ -n "$_OLD_FOO_PS1" ] ; then
        PS1="$_OLD_FOO_PS1"
        export PS1
        unset _OLD_FOO_PS1
    fi

    unset FOO_ENV
    if [ ! "$1" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate_foo
    fi
}

# unset irrelavent variables
deactivate_foo nondestructive

FOO_ENV="$HOME/local"
export FOO_ENV

_OLD_FOO_PATH="$PATH"
PATH="$FOO_ENV/usr/bin:$PATH"
export PATH

_OLD_FOO_MANPATH="$MANPATH"
MANPATH="$FOO_ENV/usr/share/man:$MANPATH"
export MANPATH

_OLD_FOO_CFLAGS="$CFLAGS"
CFLAGS="-I$FOO_ENV/usr/include $CFLAGS"
export CFLAGS

_OLD_FOO_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="-I$FOO_ENV/usr/include $CXXFLAGS"
export CXXFLAGS

_OLD_FOO_LDFLAGS="$LDFLAGS"
LDFLAGS="-L$FOO_ENV/usr/lib -Wl,-rpath,$FOO_ENV/usr/lib $LDFLAGS"
export LDFLAGS

_OLD_FOO_LD_RUN_PATH="$LD_RUN_PATH"
LD_RUN_PATH="$FOO_ENV/usr/lib:$LD_RUN_PATH"
export LD_RUN_PATH

_OLD_FOO_MAKEFLAGS="$MAKEFLAGS"
MAKEFLAGS="-j1 $MAKEFLAGS"
export MAKEFLAGS

if [ -z "$FOO_ENV_DISABLE_PROMPT" ] ||
   [ -z "$PATHIFY_DISABLE_PROMPT" ] ; then
    _OLD_FOO_PS1="$PS1"
    if [ "`basename \"$FOO_ENV\"`" = "__" ] ; then
        # special case for Aspen magic directories
        # see http://www.zetadev.com/software/aspen/
        PS1="[foo] $PS1"
    else
        #PS1="(`basename \"$FOO_ENV\"`)$PS1"
        # Add env name before first non-whitespace PS1 char
        PS1=$(echo "$PS1" | sed -e '0,/\S/s//[foo] &/')
    fi
    export PS1
fi

# This should detect bash and zsh, which have a hash command that must
# be called to get it to forget past commands.  Without forgetting
# past commands the $PATH changes we made may not be respected
if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
    hash -r
fi
